# automatically generated by the FlatBuffers compiler, do not modify

# namespace: object_detection2d

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OrientedBoundingBox(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 20

    # OrientedBoundingBox
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OrientedBoundingBox
    def CenterX(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # OrientedBoundingBox
    def CenterY(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # OrientedBoundingBox
    def Width(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # OrientedBoundingBox
    def Height(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # OrientedBoundingBox
    def Angle(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateOrientedBoundingBox(builder, centerX, centerY, width, height, angle):
    builder.Prep(4, 20)
    builder.PrependFloat32(angle)
    builder.PrependFloat32(height)
    builder.PrependFloat32(width)
    builder.PrependFloat32(centerY)
    builder.PrependFloat32(centerX)
    return builder.Offset()
