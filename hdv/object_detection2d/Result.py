# automatically generated by the FlatBuffers compiler, do not modify

# namespace: object_detection2d

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Result(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Result()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsResult(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Result
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Result
    def Instances(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 40
            from hdv.object_detection2d.Instance import Instance
            obj = Instance()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Result
    def InstancesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Result
    def InstancesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Result
    def BestIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Result
    def BestScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Result
    def BestClassIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Result
    def ImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Result
    def ImageName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Result
    def RequestedTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Result
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Result
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def ResultStart(builder):
    builder.StartObject(9)

def Start(builder):
    ResultStart(builder)

def ResultAddInstances(builder, instances):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instances), 0)

def AddInstances(builder, instances):
    ResultAddInstances(builder, instances)

def ResultStartInstancesVector(builder, numElems):
    return builder.StartVector(40, numElems, 8)

def StartInstancesVector(builder, numElems):
    return ResultStartInstancesVector(builder, numElems)

def ResultAddBestIndex(builder, bestIndex):
    builder.PrependUint64Slot(1, bestIndex, 0)

def AddBestIndex(builder, bestIndex):
    ResultAddBestIndex(builder, bestIndex)

def ResultAddBestScore(builder, bestScore):
    builder.PrependFloat32Slot(2, bestScore, 0.0)

def AddBestScore(builder, bestScore):
    ResultAddBestScore(builder, bestScore)

def ResultAddBestClassIndex(builder, bestClassIndex):
    builder.PrependUint64Slot(3, bestClassIndex, 0)

def AddBestClassIndex(builder, bestClassIndex):
    ResultAddBestClassIndex(builder, bestClassIndex)

def ResultAddImageId(builder, imageId):
    builder.PrependInt16Slot(4, imageId, 0)

def AddImageId(builder, imageId):
    ResultAddImageId(builder, imageId)

def ResultAddImageName(builder, imageName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(imageName), 0)

def AddImageName(builder, imageName):
    ResultAddImageName(builder, imageName)

def ResultAddRequestedTimestamp(builder, requestedTimestamp):
    builder.PrependUint64Slot(6, requestedTimestamp, 0)

def AddRequestedTimestamp(builder, requestedTimestamp):
    ResultAddRequestedTimestamp(builder, requestedTimestamp)

def ResultAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(7, timestamp, 0)

def AddTimestamp(builder, timestamp):
    ResultAddTimestamp(builder, timestamp)

def ResultAddStatus(builder, status):
    builder.PrependUint64Slot(8, status, 0)

def AddStatus(builder, status):
    ResultAddStatus(builder, status)

def ResultEnd(builder):
    return builder.EndObject()

def End(builder):
    return ResultEnd(builder)
