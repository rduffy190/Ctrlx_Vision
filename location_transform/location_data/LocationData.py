# automatically generated by the FlatBuffers compiler, do not modify

# namespace: location_data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LocationData(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 20

    # LocationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LocationData
    def X(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # LocationData
    def Y(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # LocationData
    def Angle(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # LocationData
    def Confidence(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # LocationData
    def Class(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateLocationData(builder, x, y, angle, confidence, class_):
    builder.Prep(4, 20)
    builder.Pad(2)
    builder.PrependUint16(class_)
    builder.PrependFloat32(confidence)
    builder.PrependFloat32(angle)
    builder.PrependFloat32(y)
    builder.PrependFloat32(x)
    return builder.Offset()
